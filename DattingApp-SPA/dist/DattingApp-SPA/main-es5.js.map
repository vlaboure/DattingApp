{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/_guards/auth.guard.ts","webpack:///src/app/_guards/prevent-unsaved-changes.ts","webpack:///src/app/_models/pagination.ts","webpack:///src/app/_resolver/list-resolver.ts","webpack:///src/app/_resolver/member-detail-resolver.ts","webpack:///src/app/_resolver/member-edit-resolver.ts","webpack:///src/app/_resolver/member-list-resolver.ts","webpack:///src/app/_resolver/messages-resolver.ts","webpack:///src/app/_services/alertify.service.ts","webpack:///src/app/_services/auth.service.ts","webpack:///src/app/_services/error.Interceptor.ts","webpack:///src/app/_services/user.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/lists/lists.component.ts","webpack:///src/app/lists/lists.component.html","webpack:///src/app/members/member-card/member-card.component.ts","webpack:///src/app/members/member-card/member-card.component.html","webpack:///src/app/members/member-detail/member-detail.component.ts","webpack:///src/app/members/member-detail/member-detail.component.html","webpack:///src/app/members/member-edit/member-edit.component.ts","webpack:///src/app/members/member-edit/member-edit.component.html","webpack:///src/app/members/member-list/member-list.component.ts","webpack:///src/app/members/member-list/member-list.component.html","webpack:///src/app/members/member-messages/member-messages.component.ts","webpack:///src/app/members/member-messages/member-messages.component.html","webpack:///src/app/members/photo-editor/photo-editor.component.ts","webpack:///src/app/members/photo-editor/photo-editor.component.html","webpack:///src/app/messages/message.component.ts","webpack:///src/app/messages/message.component.html","webpack:///src/app/nav/nav.component.ts","webpack:///src/app/nav/nav.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/reset/reset.component.ts","webpack:///src/app/reset/reset.component.html","webpack:///src/app/routes.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AuthGuard","authService","router","alertify","loggedIn","error","navigate","providedIn","PreventUnsavedChanges","component","editForm","dirty","confirm","PaginatedResult","ListResolver","userService","pageNumber","pageSize","likesParam","route","getUsers","pipe","MemberDetailResolver","getUser","params","MemberEditResolver","decodedToken","nameid","MemberListResolver","MessagesResolver","contener","console","log","getMessages","AlertifyService","message","okCallBack","AuthService","Http","baseUrl","apiUrl","jwtHelper","logOk","photoUrl","currentPhotoUrl","asObservable","next","model","post","response","user","localStorage","setItem","token","JSON","stringify","currentUser","decodeToken","changeMemberPhoto","getItem","isTokenExpired","_login","userName","tp","undefined","put","ErrorInterceptor","handle","status","statusText","applicationError","headers","get","serverError","modalStateError","errors","key","ErrorInterceptorProvider","provide","useClass","multi","UserService","http","page","itemsPerPage","userParams","paginatedResult","append","minAge","maxAge","gender","observe","result","body","pagination","parse","receptId","userId","subscribe","AppComponent","selector","templateUrl","styleUrls","tokenGetter","CustomHammerConfig","overrides","pinch","enable","rotate","AppModule","forRoot","config","whitelistedDomains","blacklistedRoutes","declarations","imports","bootstrap","providers","HomeComponent","registerMode","reset","login","getLogin","resetMode","ListsComponent","alertifyService","data","users","currentPage","res","event","loadUsers","pageChanged","MemberCardComponent","autService","sendLike","success","knownAs","MemberDetailComponent","queryParams","selectedTab","memberTabs","tabs","active","galleryOptions","width","height","imagePercent","thumbnailsColumns","imageAnimation","Slide","preview","galleryImages","getImages","imageUrls","photos","photo","push","small","url","medium","big","description","tabId","selectTab","MemberEditComponent","$event","returnValue","updateUser","updateMainPhoto","MemberListComponent","genderList","value","display","setFilters","resetFilters","MemberMessagesComponent","newMessage","loadMessages","currentUserId","getMessagesThread","messages","m","isRead","markMessageRead","sendMessage","unshift","uploader","PhotoEditorComponent","userServices","getMemeberPhotoChange","hasBaseDropZoneOver","initializeUploader","authToken","isHTML5","allowedFileType","removeAfterUpload","autoUpload","maxFileSize","onAfterAddingFile","file","withCredentials","onSuccessItem","item","dateAdded","isMain","setMainPhoto","currentMain","filter","p","deletePhoto","splice","findIndex","fileOverBase","MessagesComponent","alerify","stopImmediatePropagation","deleteMessage","NavComponent","removeItem","setLogin","home","ngOnInit","RegisterComponent","fb","cancelRegister","bsConfig","containerClass","createForm","registerForm","group","username","required","dateOfBirth","city","country","password","minLength","maxLength","confirmpassword","validators","passwordMatchValidator","g","valid","Object","assign","register","emit","cancel","ResetComponent","cancelReset","resetForm","resetPassword","appRoutes","path","runGuardsAndResolvers","canActivate","children","canDeactivate","redirectTo","pathMatch","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AlertifyService } from '../_services/alertify.service';\nimport { AuthService } from '../_services/auth.service';\n\n// composant permettant de contrôler et restreindre les accés aux routes\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  // dans le constructeur on crée des instances des classes à utiliser pour contrôler l'user\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private alertify: AlertifyService\n  ){\n\n  }\n          // ********** appel de base avec ng g ruard auth */\n  // canActivate(\n  //   next: ActivatedRouteSnapshot,\n  //   state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n          // on n'a besoin que de savoir si l'user est connecté donc un boolean\n  canActivate(): boolean{\n    // loggé ? ok\n    if (this.authService.loggedIn()){\n      return true;\n    }\n    // non loggé message erreur\n    this.alertify.error('dégage de là gros pédé');\n    // redirection vers accueil\n    this.router.navigate(['/home']);\n    return false;\n  }\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { MemberDetailComponent } from '../members/member-detail/member-detail.component';\r\nimport { CanDeactivate } from '@angular/router';\r\nimport { MemberEditComponent } from '../members/member-edit/member-edit.component';\r\n\r\n@Injectable()\r\nexport class PreventUnsavedChanges implements CanDeactivate<MemberEditComponent>{\r\n    canDeactivate(component: MemberEditComponent){\r\n        if (component.editForm.dirty){\r\n            return confirm('Etes vous sur de vouloir quitter ? tous les changements seront perdus');\r\n        }\r\n        return true;\r\n    }\r\n}","export interface Pagination{\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\nexport class PaginatedResult<T>{\r\n    result: T;\r\n    pagination: Pagination;\r\n}","import {Injectable} from '@angular/core';\r\nimport {User} from '../_models/user';\r\nimport { UserService } from '../_services/user.service';\r\nimport {Resolve, Router, ActivatedRouteSnapshot} from '@angular/router';\r\nimport { AlertifyService } from '../_services/alertify.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class ListResolver implements Resolve<User[]>{\r\n   pageNumber = 1;\r\n   pageSize = 5;\r\n   likesParam = 'Likers';\r\n   constructor(private userService: UserService, private router: Router,\r\n               private alertify: AlertifyService){}\r\n   resolve(route: ActivatedRouteSnapshot): Observable<User[]>{\r\n      return this.userService.getUsers(this.pageNumber, this.pageSize, null, this.likesParam)\r\n      .pipe(\r\n         catchError(error => {\r\n            this.alertify.error('Erreur lors de la récupération des datas');\r\n            this.router.navigate(['/home']);\r\n            return of(null); // return of--> return observable of(null)\r\n         })\r\n      );\r\n   }\r\n}","import {Injectable} from '@angular/core';\r\nimport {User} from '../_models/user';\r\nimport { UserService } from '../_services/user.service';\r\nimport {Resolve, Router, ActivatedRouteSnapshot} from '@angular/router';\r\nimport { AlertifyService } from '../_services/alertify.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n// resolver pour passer les datas avant l'affichage des données\r\n// injecté par le compilateur au lancement\r\n@Injectable()\r\nexport class MemberDetailResolver implements Resolve<User>{\r\n   constructor(private userService: UserService, private router: Router,\r\n               private alertify: AlertifyService){}\r\n   resolve(route: ActivatedRouteSnapshot): Observable<User>{\r\n      return this.userService.getUser(route.params[`id`]).pipe(\r\n         // catchError-> methode de rxjs\r\n         catchError(error => {\r\n            this.alertify.error('Erreur lors de la récupération des datas');\r\n            this.router.navigate(['/members']);\r\n            // of -> observable de rxjs\r\n            return of(null); // return of--> return observable of(null)\r\n         })\r\n      );\r\n   }\r\n}","import {Injectable} from '@angular/core';\r\nimport {User} from '../_models/user';\r\nimport { UserService } from '../_services/user.service';\r\nimport {Resolve, Router, ActivatedRouteSnapshot} from '@angular/router';\r\nimport { AlertifyService } from '../_services/alertify.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { AuthService } from '../_services/auth.service';\r\n\r\n@Injectable()\r\nexport class MemberEditResolver implements Resolve<User>{\r\n   constructor(private userService: UserService, private router: Router, private authService: AuthService,\r\n               private alertify: AlertifyService){}\r\n               \r\n   resolve(route: ActivatedRouteSnapshot): Observable<User>{\r\n      /** le\r\n       * new Claim(ClaimTypes.NameIdentifier, userFromRepo.Id.ToString()),\r\n       * de login est enregistré comme nameid dans la requete de token\r\n       */\r\n      return this.userService.getUser(this.authService.decodedToken.nameid).pipe(\r\n         catchError(error => {\r\n            this.alertify.error('Erreur lors de la récupération vos datas');\r\n            this.router.navigate(['/members']);\r\n            return of(null); // return of--> return observable of(null)\r\n         })\r\n      );\r\n   }\r\n}","import {Injectable} from '@angular/core';\r\nimport {User} from '../_models/user';\r\nimport { UserService } from '../_services/user.service';\r\nimport {Resolve, Router, ActivatedRouteSnapshot} from '@angular/router';\r\nimport { AlertifyService } from '../_services/alertify.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class MemberListResolver implements Resolve<User[]>{\r\n   pageNumber = 1;\r\n   pageSize = 5;\r\n   constructor(private userService: UserService, private router: Router,\r\n               private alertify: AlertifyService){}\r\n   resolve(route: ActivatedRouteSnapshot): Observable<User[]>{\r\n      return this.userService.getUsers(this.pageNumber, this.pageSize)\r\n      .pipe(\r\n         catchError(error => {\r\n            this.alertify.error('Erreur lors de la récupération des datas');\r\n            this.router.navigate(['/home']);\r\n            return of(null); // return of--> return observable of(null)\r\n         })\r\n      );\r\n   }\r\n}","import {Injectable} from '@angular/core';\r\nimport {User} from '../_models/user';\r\nimport { UserService } from '../_services/user.service';\r\nimport {Resolve, Router, ActivatedRouteSnapshot} from '@angular/router';\r\nimport { AlertifyService } from '../_services/alertify.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { Message } from '../_models/message';\r\nimport { debug } from 'console';\r\n\r\n@Injectable()\r\nexport class MessagesResolver implements Resolve<Message[]>{\r\n   pageNumber = 1;\r\n   pageSize = 5;\r\n   contener = 'Unread';\r\n\r\n   constructor(private userService: UserService, private router: Router,\r\n               private alertify: AlertifyService, private authService: AuthService){}\r\n\r\n   resolve(route: ActivatedRouteSnapshot): Observable<Message[]>{\r\n      console.log('resolver !!!')\r\n      return this.userService\r\n         .getMessages(\r\n            this.authService.decodedToken.nameid, \r\n            this.pageNumber,\r\n            this.pageSize,\r\n            this.contener)\r\n      .pipe(\r\n         catchError(error => {\r\n            this.alertify.error('Erreur lors de la récupération des messages');\r\n            this.router.navigate(['/home']);\r\n            return of(null); // return of--> return observable of(null)\r\n         })\r\n      );\r\n   }\r\n  // debugger;\r\n}","import { Injectable } from '@angular/core';\nimport * as alertify from 'alertifyjs';\nimport { analyzeAndValidateNgModules } from '@angular/compiler';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertifyService {\n\n  constructor() { }\n  confirm(message: string, okCallBack: () => any){\n    alertify.confirm(message, (e: any) => {\n      if (e){\n        okCallBack();\n      }\n        else{}\n    });\n  }\n    // les boites de dialogue type Alertify\n  success(message: string){\n    alertify.success(message);\n  }\n  error(message: string){\n    alertify.error(message);\n  }\n  warning(message: string){\n    alertify.warning(message);\n  }\n  message(message: string){\n    alertify.message(message);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/Http';\nimport {BehaviorSubject, Subject } from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../_models/User';\nimport { templateJitUrl } from '@angular/compiler';\n\n\n/**************************************************************************************************/\n              /****service injecté pour le login */\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class AuthService {\n  baseUrl  = environment.apiUrl + 'auth/';\n  jwtHelper = new JwtHelperService();\n  decodedToken: any;\n  currentUser: User;\n  private _login;\n  logOk = new Subject<boolean>();\n    // photo par defaut peut être changée et est initalisée au démarrage\n  photoUrl = new BehaviorSubject<string>('../../assets/user.png');\n  currentPhotoUrl = this.photoUrl.asObservable();\n// tslint:disable-next-line: typedef-whitespace\nconstructor(private Http : HttpClient) { }\n\nchangeMemberPhoto(photoUrl: string){\n  // next propriété des promises change la photo de l'objet par la photo en argument\n  this.photoUrl.next(photoUrl);\n}\n// tslint:disable-next-line: whitespace\n// tslint:disable-next-line: typedef-whitespace\n\n// ************************************************************** */\n// le login avec le this.model passé en paramètre\n  login(model: any){\n                        // pipe empile chk fonction avec le resultat de la fonction précédente\n    return this.Http.post(this.baseUrl + 'login', model).pipe(\n                        // on passe user venant du serveur en paramètre\n      map((response: any) => {\n        const user = response;\n        if (user){\n                  // le token est enregistré en local pour les connexions futures\n          localStorage.setItem('token', user.token);\n          localStorage.setItem('user', JSON.stringify(user.user));\n          // user ---> token dans le http envoyé par le serveur\n          this.currentUser = user.user;\n          this.decodedToken = this.jwtHelper.decodeToken(user.token);\n          this.changeMemberPhoto(this.currentUser.photoUrl);\n        }\n      })\n    // tslint:disable-next-line: semicolon\n    )\n  }\n\n  register(user: User){\n    // requête post à l'api\n    return this.Http.post(this.baseUrl + 'register', user);\n  }\n\n  //\n  loggedIn() {\n    const token = localStorage.getItem('token');\n    return !this.jwtHelper.isTokenExpired(token);\n  }\n\n  \n  setLogin(model: any){\n    this._login = model.userName;\n    // tslint:disable-next-line: no-debugger\n   // debugger;\n    console.log(model.userName);\n\n  }\n  getLogin(){\n    let tp = this._login;\n   // this.clearLogin();\n    return tp;\n  }\n  clearLogin(){\n    this._login = undefined;\n  }\n  reset(user: User){\n    // tslint:disable-next-line: no-debugger\n    //debugger;\n    return this.Http.put(this.baseUrl + 'resetUser', user);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpErrorResponse, HTTP_INTERCEPTORS } from '@angular/common/Http';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor{\r\n    // implementation de l'interface pour Httpinterceptor\r\n    intercept(req: import('@angular/common/Http').HttpRequest<any>, next: import('@angular/common/Http')\r\n    .HttpHandler): import('rxjs')\r\n    .Observable<import('@angular/common/Http').HttpEvent<any>> {\r\n        // throw new Error('Method not implemented.');\r\n        return next.handle(req).pipe(\r\n            catchError(error =>{\r\n                if (error instanceof HttpErrorResponse){\r\n                    if (error.status === 401){\r\n                        return throwError(error.statusText);\r\n                    }\r\n                    const applicationError = error.headers.get('Application-Error');\r\n                    if (applicationError){\r\n                        return throwError(applicationError);\r\n                    }\r\n                    const serverError = error.error;\r\n                    let modalStateError = '';\r\n                       // errors est uen propriété de l'objet error retourné par le serveur api\r\n                    if(serverError.errors && typeof serverError.errors ==='object'){\r\n                        for(const key in serverError.errors){\r\n                            if(serverError.errors[key] ){\r\n                                modalStateError += serverError.errors[key] + '\\n';\r\n                            }\r\n                        }\r\n                    }  \r\n                    return throwError(modalStateError || serverError || 'Autre chose problème...')\r\n                }\r\n            })\r\n        );\r\n    }\r\n}\r\n\r\nexport const ErrorInterceptorProvider = {\r\n    provide : HTTP_INTERCEPTORS,\r\n    useClass : ErrorInterceptor,\r\n    multi : true\r\n};\r\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/Http';\nimport { Observable } from 'rxjs';\nimport { User } from '../_models/User';\nimport { PaginatedResult } from '../_models/pagination';\nimport { map } from 'rxjs/operators';\nimport { JsonPipe } from '@angular/common';\nimport { Message } from '../_models/message';\n\n/**\n * création d'un header pour autorisations pour les requêtes get\n */\n    /* plus nécessaire car  JwtModule.forRoot dans app.module*/\n// const httpOptions = {\n//   headers: new HttpHeaders({\n//     // tslint:disable-next-line: object-literal-key-quotes\n//     'Authorization' : 'Bearer ' + localStorage.getItem('token')\n//   })\n// };\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  baseUrl = environment.apiUrl;\nconstructor(private http: HttpClient) { }\n\n// retourne un objet contenant le result--> contenu passé dans la requete\n                            // l'interface pagination-->\n                            /*currentPage: number;\n                              itemsPerPage: number;\n                              totalItems: number;\n                              totalPages: number; */\n\n  getUsers(page?, itemsPerPage?, userParams?,likesParam?): Observable<PaginatedResult<User[]>>{\n    // il faut typer le retrun <User[]>car get retourne un object et pas un user\n    // si pas de  JwtModule.forRoot dans app.module--> get doit contenir option pour token\n    const paginatedResult: PaginatedResult<User[]> = new PaginatedResult<User[]>();\n    let params = new HttpParams();\n    if(page!= null && itemsPerPage!= null){\n      // pageNumber de params.cs\n      params = params.append('pageNumber',page);\n      // pageSize de params.cs\n      params = params.append('pageSize',itemsPerPage);\n    }\n\n    if(userParams != null){\n      params = params.append('minAge', userParams.minAge);\n      params = params.append('maxAge', userParams.maxAge);\n      params = params.append('gender', userParams.gender);\n    }\n\n    if(likesParam === 'Likers'){\n      params = params.append('Likers', 'true');\n    }  \n    if(likesParam === 'Likees'){\n      params = params.append('Likees', 'true');\n    }  \n    // environment.apiUrl--> 'http://localhost:5000/api/'\n    return this.http\n    .get<User[]>(environment.apiUrl + 'users', {observe: 'response',params})\n    .pipe(\n      // map en retour :\n      // on récupère le header --> paginatedResult.result = response.body\n      //                       --> paginatedResult.pagination = JSON....      \n      map(response=>{\n        paginatedResult.result = response.body;\n        if (response.headers.get('Pagination') != null){\n          paginatedResult.pagination = JSON.parse(response.headers.get('Pagination'));\n        }\n        return paginatedResult;\n      })\n    );\n  }\n\n  /**\n   * Méthode pour récupérer les messages avec pagination\n   */\n  getMessages(id: number, page?, itemsPerPage?, contener?){\n    // comme pour getUsers on récupère les info de pagination et le message\n    const paginatedResult: PaginatedResult<Message[]> = new PaginatedResult<Message[]>();\n\n    let params = new HttpParams();\n\n    params = params.append('Contener', contener);\n\n    if (page != null && itemsPerPage != null){\n      params = params.append('pageNumber', page);\n      params = params.append('pageSize', itemsPerPage);\n    }\n    return this.http\n      .get<Message[]>(environment.apiUrl + 'users/' + id + '/messages',{\n        observe: 'response',params})\n      .pipe( \n        map(response => {\n          paginatedResult.result = response.body;\n          if (response.headers.get('Pagination') !== null){\n            paginatedResult.pagination = JSON.parse(response.headers.get('Pagination'));\n          }\n          return paginatedResult;\n        })\n      );\n  }\n\n  getMessagesThread(id: number, receptId: number){\n    return this.http\n      .get<Message[]>(environment.apiUrl + 'users/' + id + '/messages/thread/' + receptId);\n  }\n\n  getUser(id: number): Observable<User>{\n    // il faut typer le retrun <User[]>car get retourne un object et pas un user\n        // si pas de  JwtModule.forRoot dans app.module--> get doit contenir option pour token\n    return this.http.get<User>(environment.apiUrl + 'users/' + id);\n  }\n  \n  updateUser(id: number,user: User){\n    return this.http.put(this.baseUrl + 'users/' + id, user);\n  }\n\n  setMainPhoto(userId: number, id: number){\n    return this.http.post(this.baseUrl + 'users/' + userId + '/photos/' + id + '/setMain', {});\n  }\n\n  deletePhoto(userId: number, id: number){\n    return this.http.delete(this.baseUrl + 'users/' + userId + '/photos/' + id);\n  }\n\n  sendLike(id: number, receptId : number){\n    return this.http.post(this.baseUrl + 'users/' + id + '/like/' + receptId, {});\n  }\n\n  sendMessage(id: number, message: Message){\n    return this.http.post(this.baseUrl + 'users/' + id + '/messages', message);\n  }\n\n  deleteMessage(id: number, userId: number){\n    return this.http.post(this.baseUrl + 'users/' + userId + '/messages/' + id,{});\n  }\n  markMessageRead(userId: number, id: number){\n    // on souscrit au service directement dans service car il n'y a rien à renvoyer\n    this.http.post(this.baseUrl + 'users/' + userId + '/messages/' + id + '/read',{}).subscribe();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { AuthService } from './_services/auth.service';\nimport { User } from './_models/User';\nimport { JsonPipe } from '@angular/common';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  jwtHelper = new JwtHelperService();\n\n  constructor(public authService: AuthService){}\n\n  ngOnInit(){\n    const token = localStorage.getItem('token');\n    const user: User = JSON.parse(localStorage.getItem('user'));\n    if (token){\n      this.authService.decodedToken = this.jwtHelper.decodeToken(token);\n    }\n    if (user){\n      this.authService.currentUser = user;\n      this.authService.changeMemberPhoto(user.photoUrl);\n    }\n  }\n}\n","\n<app-nav></app-nav>\n        <!-- appel du router appRoute -->\n<router-outlet></router-outlet>   \n\n<!-- Toolbar -->\n","import { BrowserModule, HammerGestureConfig, enableDebugTools, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { TimeagoModule } from 'ngx-timeago';\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\nimport {BsDatepickerModule} from 'ngx-bootstrap/datepicker';\nimport { HttpClientModule } from '@angular/common/Http';\nimport { JwtModule } from '@auth0/angular-jwt'; // a mettre en tête\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { NgxGalleryModule } from '@kolkov/ngx-gallery';\nimport { AppComponent } from './app.component';\nimport { NavComponent } from './nav/nav.component';\nimport { AuthService } from './_services/auth.service';\nimport { HomeComponent } from './home/home.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ErrorInterceptorProvider } from './_services/error.Interceptor';\nimport { BsDropdownModule} from 'ngx-bootstrap/dropdown';\nimport { TabsModule } from 'ngx-bootstrap/tabs';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MemberListComponent } from './members/member-list/member-list.component';\nimport { ListsComponent } from './lists/lists.component';\nimport { MessagesComponent } from './messages/message.component';\nimport {AuthGuard} from './_guards/auth.guard';\nimport { appRoutes } from './routes';\nimport {UserService} from './_services/user.service';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { MemberCardComponent } from './members/member-card/member-card.component';\nimport { MemberDetailComponent } from './members/member-detail/member-detail.component';\nimport { AlertifyService } from './_services/alertify.service';\nimport { MemberDetailResolver } from './_resolver/member-detail-resolver';\nimport { MemberListResolver } from './_resolver/member-list-resolver';\nimport { MemberEditComponent } from './members/member-edit/member-edit.component';\nimport { MemberEditResolver } from './_resolver/member-edit-resolver';\nimport { PreventUnsavedChanges } from './_guards/prevent-unsaved-changes';\nimport { PhotoEditorComponent } from './members/photo-editor/photo-editor.component';\nimport { ListResolver } from './_resolver/list-resolver';\nimport { MessagesResolver } from './_resolver/messages-resolver';\n//import { TimeAgoObsPipe } from './_services/TimeAgoObsPipe';\nimport { ResetComponent } from './reset/reset.component';\nimport { MemberMessagesComponent } from './members/member-messages/member-messages.component';\n\n\nexport function tokenGetter(){\n   return localStorage.getItem('token');\n}\n\nexport class CustomHammerConfig extends HammerGestureConfig{\n   overrides = {\n      pinch: {enable: false},\n      rotate: {enable: false}\n   };\n}\n\n\n@NgModule({\n   declarations: [\n      AppComponent,\n      NavComponent,\n      HomeComponent,\n      RegisterComponent,\n      MemberListComponent,\n      MemberMessagesComponent,\n      ListsComponent,\n      MessagesComponent,\n      MemberCardComponent,\n      MemberDetailComponent,\n      MemberEditComponent,\n      PhotoEditorComponent,\n      //TimeAgoObsPipe,\n      ResetComponent\n   ],\n\n   imports: [\n      /******utilier.froRootpermetdecréerunsingleton\\n*****pourn'appliquerleservicesurlarouteencours\\n*/\n      TimeagoModule.forRoot(),\n      HttpClientModule,\n      NgxGalleryModule,\n      FormsModule,\n      BrowserAnimationsModule,\n      BsDatepickerModule.forRoot(),\n      BrowserAnimationsModule,\n      BsDropdownModule.forRoot(),\n      TabsModule.forRoot(),\n      PaginationModule.forRoot(),\n      ButtonsModule.forRoot(),\n      ReactiveFormsModule,\n      RouterModule.forRoot(appRoutes),\n      TimeagoModule.forRoot(),\n      FileUploadModule,\n      JwtModule.forRoot({\n         config: {\n           tokenGetter,\n           whitelistedDomains: ['localhost:5000'],\n           blacklistedRoutes: ['localhost:5000/api/auth']\n         }\n       })\n   ],\n   \n   bootstrap: [AppComponent],\n\n   providers: [\n      ErrorInterceptorProvider,\n      AuthService,\n      AlertifyService,\n      UserService,\n      MemberDetailResolver,\n      MemberListResolver,\n      MemberEditResolver,\n      MessagesResolver,\n      ListResolver,\n      PreventUnsavedChanges,\n      {provide: HAMMER_GESTURE_CONFIG, useClass: CustomHammerConfig}\n   ]\n})\nexport class AppModule { }\n","import { Component, OnInit, Output } from '@angular/core';\nimport { HttpClient } from '@angular/common/Http';\nimport { EventEmitter } from 'protractor';\nimport { AuthService } from '../_services/auth.service';\nimport { NavComponent } from '../nav/nav.component';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  // pour envoi à nav val de regiser\n  registerMode = false;\n  reset = false;\n  login:string;\n  logOk:boolean;\n\n\n // values: any;\n  constructor(private http: HttpClient, private authService: AuthService) { }\n\n  ngOnInit() {\n  //  this.getValues();\n    this.login = this.authService.getLogin();\n  //  this.authService.logOk.subscribe((logg) => this.logOk);\n    // tslint:disable-next-line: no-debugger\n    debugger;\n    //NavComponent.updateUserStatus.next(true); // here!\n  }\n\n  registerToggle(){\n    this.registerMode = true;\n  }\n\n  resetPassword(){\n    this.reset = true;\n    console.log(this.reset);\n  }\n  // getValues(){\n  //   // subscribe car on travaille sur des promesses\n  //   this.http.get('http://localhost:5000/api/values').subscribe(response =>{\n  //     this.values = response;\n  //   }, error => {console.log(error); });\n  // }\n\n\n    cancelRegisterMode(registerMode: boolean){\n      this.registerMode = registerMode;\n    }\n    cancelResetMode(resetMode: boolean){\n      this.reset = resetMode;\n    }\n}\n","<div class=\"container mt-5\">\n  <div *ngIf=\"!registerMode\" style=\"text-align: center\">\n    <h1>Trouvez l'amour</h1>\n    <p class=\"lead\">Trouvez votre âme soeur... Il suffit de s'inscrire!</p>\n    <div class=\"text-center\">\n      <button class=\"btn btn-primary btn-lg mr-2\"(click)=\"registerToggle()\">Register</button>\n      <button class=\"btn btn-info btn-lg\">Learn more</button>\n    </div>\n  </div>\n          <!-- registerMode récupéré par le emit de register.compnenet.ts si registerMode==true on affiche register mode  -->\n  <div *ngIf=\"registerMode && !reset\" class=\"container\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-4\">\n          <!-- si click sur register appel de register.component -->\n        <app-register (cancelRegister)=\"cancelRegisterMode($event)\"></app-register>\n            <!-- version avec option / relation parent enfant ramenant à api.values -->\n        <!-- <app-register [valuesFromHome] = \"values\" (cancelRegister)=\"cancelRegisterMode($event)\"></app-register> -->\n      </div>\n    </div>\n  </div>\n  <div class=\"row justify-content-center\" *ngif=\"login\"> \n    <!-- *ngIf=\"login\" -->\n    <button target=\"_blank\" class=\"text-link link-help lienMotDePasseOublie\"(click)=\"resetPassword()\"\n      >mot de passe oublié</button>\n  </div>   \n    <div *ngIf=\"reset\" class=\"row justify-content-center lienMotDePasseOublie\">\n        <app-reset (cancelReset)=\"cancelResetMode($event)\"></app-reset>\n  </div>\n</div>\n<!-- <p *ngFor=\"let value of values\">{{value.name}}</p> -->","import { Component, OnInit } from '@angular/core';\nimport { User } from '../_models/User';\nimport { Pagination, PaginatedResult } from '../_models/pagination';\nimport { UserService } from '../_services/user.service';\nimport { AlertifyService } from '../_services/alertify.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../_services/auth.service';\n\n@Component({\n  selector: 'app-lists',\n  templateUrl: './lists.component.html',\n  styleUrls: ['./lists.component.css']\n})\nexport class ListsComponent implements OnInit {\n  users: User[];\n  pagination: Pagination;\n  likesParam: string;\n  constructor(private userService: UserService, private alertifyService: AlertifyService\n    ,private route: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.route.data.subscribe(data => {\n      // ['users'] correspond à la propriété user: dans route.ts\n      //  {path : 'members', component: MemberListComponent, resolve: {users: MemberListResolver}},\n      this.users = data['users'].result;\n      this.pagination = data['users'].pagination;\n    });\n\n    this.likesParam = 'Likers';\n  }\n\n  loadUsers(){\n      this.userService\n      .getUsers(this.pagination.currentPage, this.pagination.itemsPerPage, null, this.likesParam)\n      .subscribe(\n        (res: PaginatedResult<User[]>) =>{\n          // res.result = body http\n          this.users = res.result;\n          this.pagination = res.pagination;\n          }, error =>{\n            this.alertifyService.error(error);\n          }\n      );\n  }\n\n  pageChanged(event: any): void {\n    this.pagination.currentPage = event.page;\n    this.loadUsers();\n  }\n}\n","<div class=\"text-center mt-3\">\n  <h2>{{likesParam === 'Likers' ? 'Qui me like ? ' : 'Membres que je Like'}} : {{pagination.totalItems}}</h2>\n</div>\n\n<div class=\"container mt-3\">\n\n<div class=\"row\">\n  <div class=\"btn-group\">\n    <button class=\"btn btn-primary\" [(ngModel)]=\"likesParam\" ngDefaultControl btnRadio=\"Likers\" (click)=\"loadUsers()\" >Qui me like</button>\n    <button class=\"btn btn-primary\" [(ngModel)]=\"likesParam\" ngDefaultControl btnRadio=\"Likees\" (click)=\"loadUsers()\" >Que je Like</button>\n  </div>\n</div>\n\n<br>\n\n<div class=\"row\">\n  <div *ngFor=\"let user of users\" class=\"col-sm-6 col-md-4 col-lg-4 col-xl-2\">\n    <app-member-card [user]=\"user\"></app-member-card>\n  </div>\n</div>\n\n\n\n</div>\n\n<div class=\"d-flex justify-content-center\">\n<pagination [boundaryLinks]=\"true\" [totalItems]=\"pagination.totalItems\" [itemsPerPage]=\"pagination.itemsPerPage\" [(ngModel)]=\"pagination.currentPage\"\n  (pageChanged)=\"pageChanged($event)\" previousText=\"&lsaquo;\" nextText=\"&rsaquo;\" firstText=\"&laquo;\" lastText=\"&raquo;\">\n</pagination>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { User } from 'src/app/_models/User';\nimport { AuthService } from 'src/app/_services/auth.service';\nimport { UserService } from 'src/app/_services/user.service';\nimport { AlertifyService } from 'src/app/_services/alertify.service';\n\n@Component({\n  selector: 'app-member-card',\n  templateUrl: './member-card.component.html',\n  styleUrls: ['./member-card.component.css']\n})\nexport class MemberCardComponent implements OnInit {\n  @Input() user: User;\n  constructor(private userService : UserService, private autService : AuthService,\n              private alertifyService : AlertifyService) { }\n\n  ngOnInit() {\n  }\n\n  sendLike(id: number){\n    this.userService.sendLike(this.autService.decodedToken.nameid,id).subscribe(\n      data => {this.alertifyService.success(\"user liké : \" + this.user.knownAs);},\n      error =>{this.alertifyService.error(\"error au like \"+ error)});\n  }\n}\n\n","<div class=\"card mb-3\">\n  <div class=\"card-img-warper\">\n      <img  class=\"card-img-top\" \n      src=\"{{ user.photoUrl||'../../../assets/user.png'}}\" alt=\"{{user.knownAs}}\">  \n      <ul class=\"list-inline member-icons animate text-center\">\n        <li class=\"list-inline-item\">\n          <button class=\"btn btn-primary\" [routerLink]=\"['/members/',user.id]\" \n          routerLinkActive=\"router-link-active\" ><i class=\"fa fa-user\"></i></button>\n        </li>\n        <li class=\"list-inline-item\">\n          <button class=\"btn btn-primary\" (click)=\"sendLike(user.id)\"><i class=\"fa fa-heart\"></i></button>\n        </li>\n        <li class=\"list-inline-item\">\n          <button class=\"btn btn-primary\"><i class=\"fa fa-envelope\"[routerLink]=\n            \"['/members/',user.id]\" [queryParams]=\"{tab: 3}\"></i></button>\n        </li>\n      </ul>\n  </div>\n  <div class=\"card-body p-1\">\n    <h6 class=\"card-title text-center mb-1\"><i class=\"fa fa-user\"></i>{{user.knownAs}}</h6>\n  </div>\n  <p class=\"card-text text-muted text-center\">{{user.city}}</p>\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { User } from 'src/app/_models/User';\nimport { UserService } from 'src/app/_services/user.service';\nimport { AlertifyService } from 'src/app/_services/alertify.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { NgxGalleryOptions, NgxGalleryImage, NgxGalleryAnimation } from '@kolkov/ngx-gallery';\nimport { TabsetComponent } from 'ngx-bootstrap/tabs/public_api';\n\n\n@Component({\n  selector: 'app-member-detail',\n  templateUrl: './member-detail.component.html',\n  styleUrls: ['./member-detail.component.css']\n})\nexport class MemberDetailComponent implements OnInit {\n  @ViewChild('memberTabs', {static: true}) memberTabs: TabsetComponent;\n  user: User;\n  galleryOptions: NgxGalleryOptions[];\n  galleryImages: NgxGalleryImage[];\n  constructor(private userService: UserService, private alertify: AlertifyService\n            , private route: ActivatedRoute) { }\n\n  ngOnInit() {\n    // this.loadUser();--> inutile car resolver\n        // refére à route path: member/:id ... , resolver ...\n    this.route.data.subscribe(data => {\n      this.user = data[`user`];\n    });\n    this.route.queryParams.subscribe(params =>{\n      const selectedTab = params['tab'];\n      this.memberTabs.tabs[selectedTab > 0 ? selectedTab : 0].active = true;\n    });\n\n    this.galleryOptions = [\n      {\n          width: '500px',\n          height: '500px',\n          imagePercent: 100,\n          thumbnailsColumns: 4,\n          imageAnimation: NgxGalleryAnimation.Slide,\n          preview: false\n      }\n    ];\n    this.galleryImages = this.getImages();\n  }\n\n  getImages(){\n    const imageUrls = [];\n    for (const photo of  this.user.photos){\n      imageUrls.push({\n        small: photo.url,\n        medium: photo.url,\n        big: photo.url,\n        description: photo.description\n      });\n    }\n    return imageUrls;\n  }\n\n  selectTab(tabId: number) {\n    this.memberTabs.tabs[tabId].active = true;\n  }\n\n  // selectTab(tabId: number) {\n  //   this.memberTabs.tabs[tabId].active = true;\n  // }\n\n//*************loadUser -> plus nécessaire avec le resolver */\n\n  // loadUser(){                       // route.snapshot.params[`id`]--> récupère le paramètre de l'@\n  //   this.userService.getUser(+this.route.snapshot.params[`id`]).subscribe((user: User) =>{\n  //     this.user = user;\n  //   }, error => {\n  //     this.alertify.error(error);\n  //   });\n  // }\n}\n","<div class=\"container mt-4\">\n  <div class=\"row\">\n     <h1>profile de {{user.knownAs}}</h1>\n  </div>\n  <div class=\"row\">  \n    <div class=\"col-sm-4\">\n      <div class=\"card\">\n        <img src=\"{{user.photoUrl}}\" alt=\"{{user.knownAs}}\" class=\"card-img-top img-thumbnail\">\n      \n        <div class=\"card-body\">\n          <div>\n            <strong>Location</strong>\n            <p>{{user.city}}, {{user.country}}</p>\n          </div>\n          <div>\n            <strong>Age</strong>\n            <p>{{user.age}}</p>\n          </div>\n          <div>\n            <strong>Last active</strong>\n            <p>{{user.lastActive | timeago}}</p>\n          </div>\n          <div>\n            <strong>Create</strong>\n            <p>{{user.created | date: 'mediumDate'}}</p>\n          </div>\n\n        </div>\n        <div class=\"card-footer\">\n          <button class=\"btn btn-primary\">Like</button>\n          <button class=\"btn btn-success\"(click)=\"selectTab(3)\">Message</button>\n        </div>\n      </div>  \n    </div>\n    <!-- ici on fait un container avec des onglets tabmodule -->\n      <div class=\"col-sm-8\">\n        <div class=\"tab-panel\">\n          <tabset class=\"member-tabset\" #memberTabs\n          >\n            <tab heading=\"A propos {{user.knownAs}}\">\n              <h4>Description ?</h4>\n              <p>{{user.introduction}}</p>\n              <h4>Vous cherchez ?</h4>\n              <p>{{user.lookingFor}}</p>\n            </tab>     \n            <tab heading=\"Centes d'intérêt\">\n              <h4>Intérêt</h4>\n              <p>{{user.interests}}</p>\n            </tab>    \n            <tab heading=\"Photos\">\n              <ngx-gallery [options]=\"galleryOptions\" [images]=\"galleryImages\" class=\"ngx-gallery\"></ngx-gallery>\n            </tab>    \n            <tab heading=\"Messages\">\n              <app-member-messages [receptId]=\"user.id\"></app-member-messages> \n            </tab>\n          </tabset>\n        </div>\n      </div>\n    </div>\n  </div>","import { Component, OnInit, ViewChild, HostListener } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { User } from 'src/app/_models/User';\nimport { AlertifyService } from 'src/app/_services/alertify.service';\nimport { NgForm } from '@angular/forms';\nimport { UserService } from 'src/app/_services/user.service';\nimport { AuthService } from 'src/app/_services/auth.service';\n\n\n@Component({\n  selector: 'app-member-edit',\n  templateUrl: './member-edit.component.html',\n  styleUrls: ['./member-edit.component.css']\n  \n})\nexport class MemberEditComponent implements OnInit {\n  // variable pour accéder au dom et modifier le editForm pour faire disparaître le message d'avertissement\n  // Vous avez fait des changements sans valider, vos modifications seront perdues\n  @ViewChild('editForm', {static: true}) editForm: NgForm;\n  user: User;\n  photoUrl: string;\n  // le navigateur et non l'appli envoie un message si quitter après modif sans enregistrer\n  @HostListener('window:beforeunload',['$event'])\n  unloadNotification($event: any){\n    if (this.editForm.dirty){\n      $event.returnValue = true;\n    }\n  }\n  constructor(private route: ActivatedRoute, private alertify: AlertifyService, private userService: UserService,\n                                             private authService: AuthService) { }\n\n  ngOnInit() {\n    this.route.data.subscribe(data =>{\n      this.user = data['user'];\n    });\n    this.authService.currentPhotoUrl.subscribe(photoUrl => this.photoUrl= photoUrl);\n  }\n  updateUser(){\n    this.userService.updateUser(this.authService.decodedToken.nameid, this.user).subscribe(next => {\n      this.alertify.success('mise à jour réussie');\n      this.editForm.reset(this.user);\n      this.editForm.reset(this.user);},error => {this.alertify.error(error); });\n  }\n\n  updateMainPhoto(photoUrl){\n    this.user.photoUrl = photoUrl;\n  }\n}\n","<div class=\"container mt-4\">\n  <div class=\"row\">\n    <div class=\"col-sm-4\">\n      <h1>Votre profil</h1>\n    </div>\n    <div *ngIf=\"editForm.dirty\" class=\"col-sm-8\">\n      <div class=\"alert alert-info\">\n        <strong>Attention </strong>Vous avez fait des changements sans valider, vos modifications seront perdues\n      </div>\n  </div> \n  </div>\n  <div class=\"row\">  \n    <div class=\"col-sm-4\">\n      <div class=\"card\">\n        <img src=\"{{photoUrl || '../../../assets/user.png'}}\" alt=\"{{user.knownAs}}\" class=\"card-img-top img-thumbnail\">\n      \n        <div class=\"card-body\">\n          <div>\n            <strong>Location</strong>\n            <p>{{user.city}}, {{user.country}}</p>\n          </div>\n          <div>\n            <strong>Age</strong>\n            <p>{{user.age}}</p>\n          </div>\n          <div>\n            <strong>Last active</strong>\n            <p>{{user.lastActive | timeago}}</p>\n          </div>\n          <div>\n            <strong>Create</strong>\n            <p>{{user.created | date: 'mediumDate'}}</p>\n          </div>\n\n        </div>\n        <div class=\"card-footer\">\n          <!-- button-block-> toute la largeur désactivé si pas de changement-->\n          <button [disabled]=\"!editForm.dirty\" form=\"editForm\" class=\"btn btn-success btn-block\">Sauver</button>\n        </div>\n      </div>  \n    </div>\n    <!-- ici on fait un container avec des onglets tabmodule -->\n      <div class=\"col-sm-8\">\n        <div class=\"tab-panel\">\n          <tabset class=\"member-tabset\">\n            <tab heading=\"Editer le profile\">\n              <form #editForm=\"ngForm\" id=\"editForm\" (ngSubmit)=\"updateUser()\">\n                <h4>Description ?</h4>\n                <textarea name=\"introduction\" rows=\"6\" class=\"form-control\"\n                 [(ngModel)]=\"user.introduction\"></textarea>\n                <h4>Vous cherchez ?</h4>\n                <textarea name=\"lookingFor\" rows=\"6\" class=\"form-control\"\n                 [(ngModel)]=\"user.lookingFor\">\n                </textarea>\n                 <h4>Centres d'interêt?</h4>\n                <textarea name=\"interests\" rows=\"6\" class=\"form-control\"\n                  [(ngModel)]=\"user.interests\">\n                </textarea>\n                  <div class=\"form-inline mt-2\">\n                    <label for=\"city\"><strong> Ville</strong></label>\n                    <input type=\"text\" class=\"form-control\" name=\"city\" [(ngModel)]=\"user.city\">\n                    <label for=\"city\"><strong>Pays</strong></label>\n                    <input type=\"text\" class=\"form-control\" name=\"country\" [(ngModel)]=\"user.country\"> \n                    <label for=\"city\"><strong>Nom</strong></label>\n                    <input type=\"text\" class=\"form-control\" name=\"userName\" [(ngModel)]=\"user.userName\">                   \n                  </div>\n              </form>\n            </tab>     \n            <tab heading=\"Editer les photos\">\n                <!-- on lie output getMemberPhotoChange de l'enfant photo-editor\n                  à une méthode a ajouter dans le member-edit.component.ts  -->\n              <app-photo-editor [photos]=\"user.photos\"           \n              (getMemeberPhotoChange)=\"updateMainPhoto($event)\"></app-photo-editor>\n            </tab>    \n            </tabset>\n        </div>\n      </div>\n    </div>\n  </div>","import { Component, OnInit } from '@angular/core';\nimport { User } from '../../_models/User';\nimport { AlertifyService } from '../../_services/alertify.service';\nimport { UserService } from '../../_services/user.service';\nimport { Route } from '@angular/compiler/src/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Pagination, PaginatedResult } from 'src/app/_models/pagination';\n\n@Component({\n  selector: 'app-member-list',\n  templateUrl: './member-list.component.html',\n  styleUrls: ['./member-list.component.css']\n})\nexport class MemberListComponent implements OnInit {\n  users: User[];\n  // récpération du user logué\n  user: User = JSON.parse(localStorage.getItem('user'));\n  // tableau de deux valeurs \n  genderList = [{value : 'male', display : 'Males'},{value : 'female', display : 'Females'}];\n  userParams: any = {};\n  pagination: Pagination;\n\n  constructor(private userService: UserService, private alertifyService: AlertifyService\n            , private route: ActivatedRoute) { }\n\n  ngOnInit() {\n    // this.loadUSers();\n    this.route.data.subscribe(data => {\n      // ['users'] correspond à la propriété user: dans route.ts\n      //  {path : 'members', component: MemberListComponent, resolve: {users: MemberListResolver}},\n      this.users = data['users'].result;\n      this.pagination = data['users'].pagination;\n    });\n    this.setFilters();\n  }\n  setFilters(){\n    this.userParams.gender = this.user.gender === 'female' ? 'male' : 'female';\n    this.userParams.minAge = 18;\n    this.userParams.maxAge = 99;\n  }\n\n  resetFilters(){\n    this.setFilters();\n    this.loadUsers();\n  }\n\n  pageChanged(event: any): void {\n    // page--> propriété de angular html\n    this.pagination.currentPage = event.page;\n    this.loadUsers();\n  }\n    // appel de l'observable getUsers\n\n  loadUsers(){\n    this.userService\n      .getUsers(this.pagination.currentPage, this.pagination.itemsPerPage, this.userParams)\n      .subscribe(\n        (res: PaginatedResult<User[]>) =>{\n          // res.result = body http\n          this.users = res.result;\n          this.pagination = res.pagination;\n          }, error =>{\n            this.alertifyService.error(error);\n          }\n      );\n  }\n}\n","<div class=\"text-center mt-3\">\n  <h2>Your matches - {{pagination.totalItems}} found</h2>\n</div>\n\n<div class=\"container mt-3\">\n\n  <form class=\"form-inline\" #form=\"ngForm\" (ngSubmit)= \"loadUsers()\" novalidate>\n    <div class=\"form-group\">\n      <label for=\"minAge\">Age From</label>\n      <input type=\"number\" class=\"form-control ml-1\" style=\"width: 70px\" id=\"minAge\" \n      [(ngModel)]=\"userParams.minAge\" name=\"minAge\">\n    </div>\n  \n    <div class=\"form-group px-2\">\n      <label for=\"maxAge\">Age To</label>\n      <input type=\"number\" class=\"form-control ml-1\" style=\"width: 70px\" id=\"maxAge\" \n      [(ngModel)]=\"userParams.maxAge\" name=\"maxAge\">\n    </div>\n  \n    <div class=\"form-group px-2\">\n      <label for=\"gender\">Show: </label>\n      <select class=\"form-control ml-1\" style=\"width: 130px\" id=\"gender\" \n        [(ngModel)]=\"userParams.gender\" name=\"gender\">\n        <option *ngFor=\"let gender of genderList\" [value]= \"gender.value\">\n          {{gender.display}}\n        </option>\n      </select>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\" style=\"margin-left:10px\">Apply Filters</button>\n    <button type=\"button\" class=\"btn btn-info\" (click)= \"resetFilters()\" style=\"margin-left:10px\">Reset Filter</button>\n  \n  </form>\n  <br>\n  <div class=\"row\">\n    <div *ngFor=\"let user of users\" class=\"col-lg-2 col-md-3 col-sm-6\">\n      <app-member-card [user]=\"user\"></app-member-card>\n    </div>\n  </div>\n</div>\n<div class=\"d-flex justify-content-center\">\n  <pagination   \n          [boundaryLinks]=\"true\" \n          [totalItems]=\"pagination.totalItems\"  \n          [(ngModel)]=\"pagination.currentPage\"           \n          [itemsPerPage]=\"pagination.itemsPerPage\"\n          (pageChanged)=\"pageChanged($event)\"\n          previousText=\"&lsaquo;\" nextText=\"&rsaquo;\" firstText=\"&laquo;\" lastText=\"&raquo;\">\n  </pagination>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Message } from 'src/app/_models/message';\nimport { UserService } from 'src/app/_services/user.service';\nimport { AlertifyService } from 'src/app/_services/alertify.service';\nimport { AuthService } from 'src/app/_services/auth.service';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-member-messages',\n  templateUrl: './member-messages.component.html',\n  styleUrls: ['./member-messages.component.css']\n})\nexport class MemberMessagesComponent implements OnInit {\n  @Input() receptId: number;\n  messages: Message[];\n  newMessage: any ={};\n\n  constructor(private userService: UserService, private alertify: AlertifyService,\n              private authService: AuthService) { }\n\n  ngOnInit() {\n    this.loadMessages();\n  }\n\n  loadMessages(){\n    const currentUserId = + this.authService.decodedToken.nameid; \n    this.userService.getMessagesThread(this.authService.decodedToken.nameid, this.receptId)\n    .pipe(\n      tap(messages => {\n        for (let m of messages){\n   \n         if (m.isRead === false && m.receptId === currentUserId){\n            this.userService.markMessageRead(currentUserId, m.id);\n          }\n        }\n      })\n    )\n    .subscribe(messages => {\n      this.messages = messages;\n    }\n      ,error =>{\n        this.alertify.error(error);\n      });\n    console.log(this.receptId);\n  }\n  sendMessage(){\n    this.newMessage.receptId = this.receptId;\n    this.userService.sendMessage(this.authService.decodedToken.nameid, this.newMessage)\n    .subscribe((message: Message) =>\n    {\n      // unshift: place au début du tableau\n      this.messages.unshift(message);\n      // effacer le message\n      this.newMessage = \"\";\n    }, error => {this.alertify.error(error); });\n  }\n}\n","<div class=\"card\">\n  <div class=\"card-body\">\n    <div *ngIf=\"messages?.length === 0\">\n      <p>Pas de message pour le moment</p>\n    </div> \n    <ul class=\"chat\">\n      <li *ngFor=\"let message of messages\">\n        <!-- à elle lui sender = user détail -->\n        <div *ngIf=\"message.senderId == receptId\">\n          <span class=\"chat-img float-left\">\n            <img src=\"{{message.senderPhotoUrl}}\" alt=\"{{message.senderKnownAs}}\" class=\"rounded-circle\">\n          </span>\n          <div class=\"chat-body\">\n            <div class=\"header\">            \n              <strong class=\"primary-font float-left\">{{message.senderKnownAs}}</strong>\n              <small class=\"text-muted\">\n                <span class=\"fa fa-clock-o\">{{message.messageSent | timeago}}</span>\n              </small> \n            </div>\n            <p>{{message.content}}</p>\n\n          </div>\n        </div>\n        <!-- à moi sender different user détail-->\n        <div *ngIf=\"message.senderId != receptId\">\n          <span class=\"chat-img float-right\">\n            <img src=\"{{message.senderPhotoUrl}}\" alt=\"{{message.senderKnownAs}}\" class=\"rounded-circle\">\n          </span>\n          <div class=\"chat-body\">\n            <div class=\"header\">             \n              <small class=\"text-muted\">\n                <span class=\"fa fa-clock-o\"> Envoyé {{message.messageSent | timeago}}</span>\n                <span *ngIf=\"!message.isRead\" class=\"text-danger\">(Non lu)</span>               \n                <span *ngIf=\"message.isRead\" class=\"fa fa-clock-o\"> lu : {{message.dateRead | timeago}}</span>               \n              </small>             \n                <strong class=\"primary-font float-right\">{{message.senderKnownAs}}</strong>\n            </div>\n            <p>{{message.content}}</p>\n          </div>\n        </div>\n      </li> \n    </ul>\n    <div class=\"card-footer\">\n      <form #messageForm=\"ngForm\" (ngSubmit)=\"messageForm.valid && sendMessage()\">\n        <div class=\"input-group\">\n          <span class=\"input-group-append\">\n            <button class=\"btn btn-light\" [disabled]=\"!messageForm.valid\"> Message </button>\n          </span>\n            <!-- <input class=\"form-control\" cols=\"40\" line=\"10\" name=\"content\" [(ngModel)]=newMessage.content> -->\n            <textarea class=\"form-control\" cols=\"40\" line=\"10\" name=\"content\" [(ngModel)]=newMessage.content></textarea>\n        </div>\n      </form>\n    </div> \n  </div>\n</div>\n\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FileUploader } from 'ng2-file-upload';\nimport { Photo } from 'src/app/_models/photo';\nimport { environment } from 'src/environments/environment';\nimport { AuthService } from 'src/app/_services/auth.service';\nimport { UserService } from 'src/app/_services/user.service';\nimport { AlertifyService } from 'src/app/_services/alertify.service';\n\n\n\n\n// child de member-edit.component\n@Component({\n  selector: 'app-photo-editor',\n  templateUrl: './photo-editor.component.html',\n  styleUrls: ['./photo-editor.component.css']\n})\nexport class PhotoEditorComponent implements OnInit {\n  @Input() photos: Photo[];\n  @Output() getMemeberPhotoChange = new EventEmitter<string>();\n  uploader: FileUploader;\n  hasBaseDropZoneOver = false;\n  baseUrl = environment.apiUrl;\n  currentMain: Photo;\n\n  constructor(private authService: AuthService, private userServices: UserService, \n              private alertifyService: AlertifyService) {}\n\n  ngOnInit() {\n    this.initializeUploader();\n  }\n  \n  public fileOverBase(e: any): void {\n    this.hasBaseDropZoneOver = e;\n  }\n  // fonction pour initialiser le composant\n\n  initializeUploader(){\n    this.uploader = new FileUploader({\n      url : this.baseUrl + 'users/' +  this.authService.decodedToken.nameid + '/photos',\n      authToken : 'Bearer ' + localStorage.getItem('token'),\n      isHTML5: true,\n      allowedFileType: ['image'],\n      removeAfterUpload: true,\n      autoUpload: false,\n      maxFileSize: 10 * 1024 * 1024\n    });\n\n   // parametrage du credential dans la methode onAfterAddingFile\n   // la photo telechargée en local n'utilisera pas les cookies\n    this.uploader.onAfterAddingFile = (file) => {file.withCredentials = false; };\n\n                // rafraichissement de la galerie\n    // après chargement dans le cloud et envoi du PublicId à la base par le cloud\n    // on charge les données depuis\n    // onSuccessItem renvoyé par FileUploader quand la photo est correctement uploadée\n    this.uploader.onSuccessItem = (item, response, status, headers) => {\n      if (response){\n        const res: Photo = JSON.parse(response);\n        const photo = {\n          id: res.id,\n          dateAdded: res.dateAdded,\n          url: res.url,\n          description: res.description,\n          isMain: res.isMain\n        };\n        // ajout de la photo a l'array\n        this.photos.push(photo);\n        // si le user vient d'être créé, la photo est ajoutée au tableau mais\n        // le rafraichissement ne se fait que lors du chargement depuis le serveur et la BDD\n        // donc si la photo est main on fait un refersh  pour afficher immédiatement la photo\n        if (photo.isMain){\n          // même chose que dans setMainPhoto\n          this.authService.changeMemberPhoto(photo.url);\n          this.authService.currentUser.photoUrl = photo.url;\n          localStorage.setItem('user', JSON.stringify(this.authService.currentUser));\n        } \n      }\n    };\n  }\n\n  setMainPhoto(photo: Photo){\n      this.userServices.setMainPhoto(this.authService.decodedToken.nameid , photo.id).subscribe(() => {\n      // on change le main dans la partie angular\n      // le but est d'afficher l'image sans interroger le serveur\n      // reste à rafraichir le parent--> member-edit.component\n      this.currentMain = this.photos.filter(p => p.isMain === true)[0];\n      this.currentMain.isMain = false;\n      photo.isMain = true;\n      this.authService.changeMemberPhoto(photo.url);\n      // pour le changement de photo et le rafraichissement\n      // changé et this.getMemeberPhotoChange.emit(photo.url) n'est plus utilisé remplacé avec le auth\n      this.authService.currentUser.photoUrl = photo.url;\n      localStorage.setItem('user', JSON.stringify(this.authService.currentUser));\n      //**************************** */\n      // this.getMemeberPhotoChange.emit(photo.url); changé avec le behaviorSubject\n    }, error => { this.alertifyService.error('erreur lors de la tentative de changement de main photo')})\n  }\n\n  deletePhoto(id: number){\n    this.alertifyService.confirm('sur de vouloir supprimer la photo', () => {\n                                         //.authService.decodedToken.nameid  \n      this.userServices.deletePhoto(this.authService.currentUser.id, id).subscribe(() => {\n        this.photos.splice(this.photos.findIndex( p => p.id === id), 1);\n        this.alertifyService.success('photo supprimée avec succès');  \n      }, error => {this.alertifyService.error('erreur de suppression '+ error)});\n    })\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-sm-2\" *ngFor=\"let photo of photos\">\n    <img src=\"{{photo.url}}\" class=\"img-thumbnail\" alt=\"\">\n    <div class=\"text-center\">\n      <button type=\"button\" class=\"btn btn-sm mr-1\" \n                (click)=\"setMainPhoto(photo)\"\n                [disabled]=\"photo.isMain\"\n                [ngClass]=\"photo.isMain?'btn-success active':'btn-secondary'\">Main\n      </button>\n      <button type=\"button\" class=\"btn btn-sm btn-danger\" \n        (click)=\"deletePhoto(photo.id)\"\n        [disabled]=\"photo.isMain\"><i class=\"fa fa-trash-o\"></i>\n    </button>\n    </div>\n  </div>\n</div>\n\n\n\n<div class=\"row mt-3\">\n \n  <div class=\"col-md-4\">\n\n      <h4 class=\"liste\">Photo choisie</h4>\n\n      <div ng2FileDrop\n           [ngClass]=\"{'nv-file-over': hasBaseDropZoneOver}\"\n           (fileOver)=\"fileOverBase($event)\"\n           [uploader]=\"uploader\"\n           class=\"card bg-faded p-3 text-center mb-3 my-drop-zone\">\n           <i class=\"fa fa-upload fa-3x\"></i> \n           Déposer les images ici\n      </div>\n\n      Multiple\n      <input type=\"file\" ng2FileSelect [uploader]=\"uploader\" multiple  /><br/>\n\n      Simple\n      <input type=\"file\" ng2FileSelect [uploader]=\"uploader\" />\n  </div>\n\n  \n  <div class=\"col-md-8\"  style=\"margin-bottom: 40px\" *ngIf=\"uploader?.queue?.length\">\n\n      <h4 class=\"liste\">liste fichiers</h4>\n      <p>taille queue: {{ uploader?.queue?.length }}</p>\n\n      <table class=\"table\">\n          <thead>\n          <tr>\n              <th width=\"50%\">Nom</th>\n              <th>Taille</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr *ngFor=\"let item of uploader.queue\">\n              <td><strong>{{ item?.file?.name }}</strong></td>\n              <td *ngIf=\"uploader.options.isHTML5\" nowrap>{{ item?.file?.size/1024/1024 | number:'.2' }} MB</td>\n              <!-- <td *ngIf=\"uploader.options.isHTML5\">\n                  <div class=\"progress\" style=\"margin-bottom: 0;\">\n                      <div class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"{ 'width': item.progress + '%' }\"></div>\n                  </div>\n              </td>\n              <td class=\"text-center\">\n                  <span *ngIf=\"item.isSuccess\"><i class=\"glyphicon glyphicon-ok\"></i></span>\n                  <span *ngIf=\"item.isCancel\"><i class=\"glyphicon glyphicon-ban-circle\"></i></span>\n                  <span *ngIf=\"item.isError\"><i class=\"glyphicon glyphicon-remove\"></i></span>\n              </td>\n              <td nowrap>\n                  <button type=\"button\" class=\"btn btn-success btn-xs\"\n                          (click)=\"item.upload()\" [disabled]=\"item.isReady || item.isUploading || item.isSuccess\">\n                      <span class=\"glyphicon glyphicon-upload\"></span> Upload\n                  </button>\n                  <button type=\"button\" class=\"btn btn-warning btn-xs\"\n                          (click)=\"item.cancel()\" [disabled]=\"!item.isUploading\">\n                      <span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel\n                  </button>\n                  <button type=\"button\" class=\"btn btn-danger btn-xs\"\n                          (click)=\"item.remove()\">\n                      <span class=\"glyphicon glyphicon-trash\"></span> Remove\n                  </button>\n              </td> -->\n          </tr>\n          </tbody>\n      </table>\n\n      <div>\n          <div>\n              Avancement:\n              <div class=\"progress mb-4\">\n                  <div class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"{ 'width': uploader.progress + '%' }\"></div>\n              </div>\n          </div>\n          <button type=\"button\" class=\"btn btn-success btn-s\"\n                  (click)=\"uploader.uploadAll()\" [disabled]=\"!uploader.getNotUploadedItems().length\">\n              <span class=\"fa fa-upload\"></span> Tout Uploader\n          </button>\n          <button type=\"button\" class=\"btn btn-warning btn-s\"\n                  (click)=\"uploader.cancelAll()\" [disabled]=\"!uploader.isUploading\">\n              <span class=\"fa fa-ban\"></span> Tout arrêter\n          </button>\n          <button type=\"button\" class=\"btn btn-danger btn-s\"\n                  (click)=\"uploader.clearQueue()\" [disabled]=\"!uploader.queue.length\">\n              <span class=\"fa fa-trash\"></span> Tout supprimer\n          </button>\n      </div>\n\n  </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AlertifyService } from '../_services/alertify.service';\nimport { UserService } from '../_services/user.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../_services/auth.service';\nimport { Message } from '../_models/message';\nimport { Pagination, PaginatedResult } from '../_models/pagination';\n\n@Component({\n  selector: 'app-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.css']\n})\nexport class MessagesComponent implements OnInit {\n  messages: Message[];\n  pagination: Pagination;\n  contener = 'Unread';\n\n  constructor(private userService: UserService, private alerify: AlertifyService, \n              private route: ActivatedRoute, private authService: AuthService) { }\n\n  ngOnInit() {\n    this.route.data.subscribe(data =>{\n      this.messages = data['messages'].result;\n      this.pagination = data['messages'].pagination;\n    })\n  }\n\n  loadMessages(){\n    this.userService\n    .getMessages(this.authService.decodedToken.nameid, \n      this.pagination.currentPage,\n      this.pagination.itemsPerPage,\n      this.contener)\n    .subscribe(\n      (res: PaginatedResult<Message[]>) =>{\n        this.messages = res.result;\n        this.pagination = res.pagination;\n      },error =>{\n        this.alerify.error(error);\n      }\n    );\n  }\n\n  deleteMessage(id: number){\n    // equivalant de     (click)=\"$event.stopPropagation()\" dans html\n    event.stopImmediatePropagation();\n    //alertify --> message, fonction de callback\n    this.alerify.confirm('voulez vous vraiment supprimer ce message ?',() =>{\n    this.userService.deleteMessage(id, this.authService.decodedToken.nameid).subscribe(()=>{\n      this.messages.splice(this.messages.findIndex(m => m.id === id),1);\n      this.alerify.success('message supprimé');},error => {this.alerify.error(error); });\n    });\n  }\n\n  pageChanged(event: any): void{\n    this.pagination.currentPage = event.page;\n    this.loadMessages();\n  }\n\n}\n","<div class=\"container mt-5\">\n  <div class=\"row\">\n    <div class=\"btn-group\">\n      <button class=\"btn btn-primary\" [(ngModel)]=\"contener\" btnRadio=\"Unread\"(click)=\"loadMessages()\">\n        <i class=\"fa fa-envelope\"></i>non lus\n      </button>\n      <button class=\"btn btn-primary\" [(ngModel)]=\"contener\" btnRadio=\"Inbox\"(click)=\"loadMessages()\">\n        <i class=\"fa fa-envelope-open\"></i>reception\n      </button>\n      <button class=\"btn btn-primary\" [(ngModel)]=\"contener\" btnRadio=\"Outbox\"(click)=\"loadMessages()\">\n        <i class=\"fa fa-paper-plane\"></i>Envoi\n      </button>\n    </div>\n  </div>\n  <div class=\"row\" *ngIf=\"messages.length == 0\">\n    <h3>Pas de message</h3>\n  </div>\n  <div class=\"row\" *ngIf=\"messages.length > 0\">\n    <table class=\"table table-hover\" style=\"cursor:pointer\">\n      <tr>\n        <th style=\"width: 40%\">Message</th>\n        <th style=\"width: 20%\">De / A</th>\n        <th style=\"width: 20%\">Evvoi / reception</th>\n        <th style=\"width: 20%\"></th>\n      </tr>\n      <tr *ngFor=\"let message of messages\"[routerLink]=\"['/members',\n        contener=='Outbox'? message.receptId:message.senderId]\" [queryParams]=\"{tab : 3}\">\n        <td>{{message.content}}</td>\n        <td>\n          <div *ngIf=\"contener != 'Outbox'\">\n            <img src=\"{{message?.senderPhotoUrl}}\" alt=\"\" class=\"img-circle rounded-circle\">\n            <strong> {{message.senderKnownAs}}</strong>\n          </div>\n          <div *ngIf=\"contener === 'Outbox'\">\n            <img src=\"{{message?.receptPhotoUrl}}\" alt=\"\" class=\"img-circle rounded-circle\">\n            <strong>{{message.receptKnownAs}}</strong>\n          </div>\n        </td>\n        <td>{{message.messageSent | timeago }}</td>\n        <td>\n          <!-- (click)=\"$event.stopPropagation()\" dans button -->\n          <button class=\"bnt btn-danger\"  (click)=\"deleteMessage(message.id)\">Delete</button>\n        </td>\n      </tr>\n    </table>\n  </div>\n\n</div>\n\n\n<div class=\"d-flex justify-content-center\">\n  <pagination [boundaryLinks]=\"true\" \n              [totalItems]=\"pagination.totalItems\"\n              [itemsPerPage]=\"pagination.itemsPerPage\"\n              [(ngModel)]=\"pagination.currentPage\"\n              (pageChanged)=\"pageChanged($event)\"\n            previousText=\"&lsaquo;\" nextText=\"&rsaquo;\" firstText=\"&laquo;\" lastText=\"&raquo;\">\n</pagination>\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { AlertifyService } from '../_services/alertify.service';\r\nimport { Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { HomeComponent } from '../home/home.component';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-nav',\r\n  templateUrl: './nav.component.html',\r\n  styleUrls: ['./nav.component.css']\r\n})\r\nexport class NavComponent implements OnInit {\r\n  private home: HomeComponent; \r\n  constructor(\r\n    public authService: AuthService,\r\n    private alertify: AlertifyService,\r\n    private router: Router    \r\n    ) { }\r\n  // pour récupérer les valeurs depuis navcomponent.html\r\n  model: any = {};\r\n  photoUrl: string;\r\n  loged: string;\r\n\r\n    // charger la photo user.png avec observable\r\n  ngOnInit() {\r\n    this.authService.currentPhotoUrl.subscribe(photoUrl => this.photoUrl = photoUrl);\r\n  }\r\n  \r\n  login(){\r\n    // il faut souscrire au service avec le this.model\r\n      // subscribe(observer=>)  \r\n    this.authService.login(this.model).subscribe(next => {\r\n      this.alertify.success('loggin OK !!!'); } , error => {\r\n        this.alertify.error(error);\r\n        // pour exemple on peut faire plus simple en appelant navigate dans le next\r\n      }, () => this.router.navigate(['/members']));\r\n  }\r\n\r\n  loggedIn() {\r\n    return this.authService.loggedIn();\r\n  }\r\n\r\n  logOut(){\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    this.authService.decodedToken = null;\r\n    this.authService.currentUser = null;\r\n    console.log('logged out');\r\n    this.router.navigate(['/home']); \r\n  }\r\n  setLogin(){\r\n    this.authService.setLogin(this.model);\r\n    // NavComponent.updateUserStatus.subscribe(res =>{\r\n    //   this.authService.setLogin(this.model);\r\n    // })\r\n    // tslint:disable-next-line: no-debugger\r\n    debugger;\r\n  //  this.authService.logOk.next(true);\r\n    this.home.ngOnInit();\r\n    console.log(this.model);\r\n  }\r\n\r\n}\r\n","<nav class=\"navbar navbar-expand-md navbar-dark bg-primary\">\n  <div class=\"container\">\n    <a class=\"navbar-brand\" [routerLink]=\"['/home']\">Application de rencontre</a>\n\n    <!-- supprimé pour ne pas utiliser JQuery -->\n    <!-- <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button> -->\n  <!-- ********************* -->\n  \n    <!-- <div class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\"> -->\n      <ul class=\"navbar-nav mr-auto\">\n        <!-- class=\"nav-item\" routerLinkActive=\"active\" pour surligner au survol des liens -->\n        <li class=\"nav-item\" routerLinkActive=\"active\">\n          <!-- on tape a-router et le routerLink est auto implémenté -->\n          <a class=\"nav-link\" [routerLink]=\"['/members']\">Matches</a>\n        </li>\n        <li class=\"nav-item\" routerLinkActive=\"active\">\n          <a class=\"nav-link\"[routerLink]=\"['/lists']\">Listes</a>\n        </li>\n        <li class=\"nav-item\" routerLinkActive=\"active\">\n          <a class=\"nav-link\" [routerLink]=\"['/messages']\">Messages</a>\n        </li>\n        <!-- <li class=\"nav-item\">\n          <a  *ngIf=\"loggedIn()\" class=\"nav-link\" (click)=\"logOut()\">Logout</a>\n        </li> -->\n        <!-- <div *ngif=\"loggedIn()\" class=\"dropdown\">\n          <a class=\"nav-link dropdown-toggle text-light\">\n            welcome{{authService.decodeToken?.unique_name}}\n          </a>  \n          <div class=\"dropdown-menu\">\n            <a class=\"dropdown-item\" href=\"#\">Action</a>\n            <a class=\"dropdown-divider\"></a>\n            <a class=\"dropdown-item\" href=\"#\">Something else here</a>\n          </div>\n        </div> -->\n      </ul>\n  \n      <div *ngIf=\"loggedIn()\" class=\"dropdown\" dropdown>\n        <span>\n          <img src=\"{{photoUrl || '../../../assets/user.png'}}\" alt=\"\">\n        </span>\n        <a class=\"dropdown-toggle text-light\" dropdownToggle>\n          Bienvenue {{authService.decodedToken?.unique_name | titlecase}}\n        </a>\n      \n        <div class=\"dropdown-menu mt-3\" *dropdownMenu>\n          <a class=\"dropdown-item\" [routerLink]=\"['/members/edit']\">\n            <i class=\"fa fa-user\"></i> Editer le profil</a>\n          <div class=\"dropdown-divider\"></div>\n          <a class=\"dropdown-item\" href=\"#\"><i class=\"fa fa-sign-out\"(click)=\"logOut()\">logout</i></a>\n        </div>\n      </div>\n  \n      <form *ngIf=\"!loggedIn()\" #loginForm=\"ngForm\" class=\"form-inline my-2 my-lg-0\"(ngSubmit)=\"login()\">\n        <input class=\"form-control mr-sm-2\" type=\"text\" name=\"userName\" \n        placeholder=\"UserName\" requiered [(ngModel)]=\"model.userName\" (change)=\"setLogin()\">\n  \n        <input class=\"form-control mr-sm-2\" type=\"password\" name=\"Password\" \n        placeholder=\"Password\" requiered [(ngModel)]=\"model.Password\">\n        <button [disabled]=\"!loginForm.valid\" class=\"btn btn-success my-2 my-sm-0\" type=\"submit\">Login</button>\n\n      </form>\n  </div>\n</nav>","import { Component, OnInit,Input, Output, EventEmitter } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { BsDatepickerConfig } from 'ngx-bootstrap/datepicker';\nimport { AlertifyService } from '../_services/alertify.service';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { User } from '../_models/User';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n // @Input() valuesFromHome;\n    // communication enfant -->parent\n  @Output() cancelRegister = new EventEmitter(); \n  user: User;\n  registerForm: FormGroup;\n    // déclaration de bsConfig en partial pour redre tous les paramètres optionne\n  bsConfig: Partial <BsDatepickerConfig>;\n  constructor(\n    public authService: AuthService,\n    private alertify: AlertifyService,\n    private fb: FormBuilder,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n      // appliquer la couleur au datepicker\n    this.bsConfig = {\n      containerClass: 'theme-red'\n    },\n    \n      // remplace la methode register initiale ET REMPLACE PAR \n      // FormBuilder \n    // this.registerForm = new FormGroup({\n    //   username: new FormControl('',Validators.required),\n    //   password: new FormControl('',[Validators.required,Validators.minLength(6),\n    //                 Validators.maxLength(12)]),\n    //   confirmpassword: new FormControl('', Validators.required) \n    // },this.passwordMatchValidator);\n    /*********Remplace toutes les entrées dessus :*****/\n    this.createForm();\n  }\n\n  createForm(){\n    this.registerForm = this.fb.group({\n      gender:['male'],\n      username: ['', Validators.required],\n      knownAs: ['', Validators.required],\n      dateOfBirth: [null, Validators.required],\n      city: ['', Validators.required],\n      country: ['', Validators.required],\n      password: ['', [Validators.required,Validators.minLength(6),\n        Validators.maxLength(12)]],\n      confirmpassword: ['', Validators.required]\n    }, { validators: this.passwordMatchValidator});\n  }\n\n  passwordMatchValidator(g: FormGroup){\n    return g.get('password').value === g.get('confirmpassword').value ? null : {'mismatch': true } \n  }\n\n  register(){\n    // this.authService.register(this.model).subscribe(() => {\n    //   this.alertify.success('register accompli');\n    // }, error => {this.alertify.error(error); });\n\n        //***   register avec formGroup */\n    if (this.registerForm.valid){\n        // assign: méthode js \n        // copie les données d'un objet dans un autre {}\n      this.user = Object.assign({}, this.registerForm.value);\n\n      // souscription à register de authService\n      this.authService.register(this.user).subscribe(() => {\n        this.alertify.success('register réussi');\n      }, error => \n      { this.alertify.error(error); },\n      // dernier paramètre de subscribe--> complete (complément)\n      // on y met le login et une redirection vers la page d'accueil\n      () => {\n          this.authService.login(this.user).subscribe(() => {\n          this.router.navigate(['/members']);\n          });\n        }\n      );\n    }\n  }\n\n  cancel(){\n    // envoi de l'event avec la valeur false pour valider le cancel\n    this.cancelRegister.emit(false);\n    console.log('cancelled');\n  }\n}\n","<form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n  <h2 class=\"text-center text-primary\">Sign Up</h2>\n  <hr>\n  <div class=\"form-group\">\n    <label class=\"control-label\" style=\"margin-right:10px\">Je suis: </label>\n    <label class=\"radio-inline\">\n      <input class=\"mr-3\" type=\"radio\" value=\"male\" formControlName=\"gender\">Un homme\n    </label>\n    <label class=\"radio-inline ml-3\">\n      <input class=\"mr-3\" type=\"radio\" value=\"female\" formControlName=\"gender\">Une femme\n    </label>\n  </div>\n\n  <div class=\"form-group\">\n    <!-- implémentation des controles de saise -->\n    <input type=\"text\" \n    [ngClass]=\"{'is-invalid': registerForm.get('username').errors \n      && registerForm.get('username').touched}\"\n    class=\"form-control\" formControlName=\"username\"\n    placeholder=\"Nom\">\n    <div class=\"invalid-feedback\">Entrer un nom de user</div>\n  </div>\n\n  <div class=\"form-group\">\n    <input [ngClass]=\"{'is-invalid': registerForm.get('knownAs').errors \n      && registerForm.get('knownAs').touched}\" class=\"form-control\"\n      placeholder=\"Pseudo\" formControlName=\"knownAs\">\n        <!-- ici ca marche aussi si juste\n        <div class=\"invalid-feedback\">Entrer un nom de user</div> -->\n    <div class=\"invalid-feedback\" *ngIf=\"registerForm.get('knownAs').touched \n      && registerForm.get('knownAs').hasError('required')\">Renseignez le pseudo</div>\n  </div>\n\n  <div class=\"form-group\">\n    <input [ngClass]=\"{'is-invalid': registerForm.get('dateOfBirth').errors \n      && registerForm.get('dateOfBirth').touched}\" class=\"form-control\"\n      placeholder=\"Date de naissance\" formControlName=\"dateOfBirth\" type=\"text\" bsDatepicker [bsConfig]=\"bsConfig\">\n              <!-- ici ca marche aussi si juste\n        <div class=\"invalid-feedback\">Entrer un nom de user</div> -->\n    <div class=\"invalid-feedback\" *ngIf=\"registerForm.get('dateOfBirth').touched \n      && registerForm.get('dateOfBirth').hasError('required')\">Renseignez  la date de naissance</div>\n  </div>\n\n  <div class=\"form-group\">\n    <input [ngClass]=\"{'is-invalid': registerForm.get('city').errors \n      && registerForm.get('city').touched}\" class=\"form-control\"\n      placeholder=\"Ville\" formControlName=\"city\">\n              <!-- ici ca marche aussi si juste\n        <div class=\"invalid-feedback\">Entrer un nom de user</div> -->\n    <div class=\"invalid-feedback\" *ngIf=\"registerForm.get('city').touched \n      && registerForm.get('city').hasError('required')\">Renseignez la ville</div>\n  </div>\n\n  <div class=\"form-group\">\n    <input [ngClass]=\"{'is-invalid': registerForm.get('country').errors \n      && registerForm.get('country').touched}\" class=\"form-control\"\n      placeholder=\"Pays\" formControlName=\"country\">\n              <!-- ici ca marche aussi si juste\n        <div class=\"invalid-feedback\">Entrer un nom de user</div> -->\n    <div class=\"invalid-feedback\" *ngIf=\"registerForm.get('country').touched \n      && registerForm.get('country').hasError('required')\">Renseignez le pays</div>\n  </div>\n\n  <div class=\"form-group\">\n    <!-- && registerForm.get('password').touched supprimé dans chk ngif -->\n    <input type=\"password\" \n    [ngClass]=\"{'is-invalid': registerForm.get('password').errors && \n    registerForm.get('password').touched}\"\n    class=\"form-control\" formControlName= \"password\"\n    placeholder=\"mot de passe\">\n    <div class=\"invalid-feedback\"\n      *ngIf=\"registerForm.get('password').hasError('required')\">\n      Entrer un mot de passe\n    </div>\n    <div class=\"invalid-feedback\"\n      *ngIf=\"registerForm.get('password').hasError('minlength')\">\n      Entrer un mot de passe de minimum 6 caractères\n    </div>\n    <div class=\"invalid-feedback\"\n      *ngIf=\"registerForm.get('password').hasError('maxlength')\">\n      Entrer un mot de passe de maximum 12 caractères\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n      <!-- && registerForm.get('password').touched supprimé dans chk ngif -->\n    <input type=\"password\" \n    [ngClass]=\"{'is-invalid': registerForm.get('confirmpassword').errors\n    && registerForm.get('confirmpassword').touched\n    || registerForm.get('confirmpassword').touched\n    && registerForm.hasError('mismatch')}\"\n    class=\"form-control\" formControlName= \"confirmpassword\"\n    placeholder=\"confirmer mot de passe\">\n    <div class=\"invalid-feedback\"\n      *ngIf=\"registerForm.get('confirmpassword').hasError('required')\">\n      Entrer un mot de passe\n    </div>\n    <div class=\"invalid-feedback\"\n      *ngIf=\"registerForm.hasError('mismatch')\">\n      Entrer un mot de passe identique\n    </div>\n  </div>\n\n  <div class=\"form-group text-center\">\n    <button class=\"btn btn-success\" [disabled]=\"!registerForm.valid\" type=\"submit\">Valider </button>\n    <button class=\"btn btn-default\" type=\"button\" (click)=\"cancel()\">Cancel</button>\n  </div>\n  \n</form>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AlertifyService } from '../_services/alertify.service';\nimport { User } from '../_models/User';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../_services/auth.service';\nimport { BsDatepickerConfig } from 'ngx-bootstrap/datepicker';\n\n\n@Component({\n  selector: 'app-reset',\n  templateUrl: './reset.component.html',\n  styleUrls: ['./reset.component.css']\n})\nexport class ResetComponent implements OnInit {\n  @Output() cancelReset = new EventEmitter(); \n  user: User;\n  resetForm: FormGroup;\n  bsConfig: Partial <BsDatepickerConfig>;\n  login: string;\n\n  constructor(public authService: AuthService,\n              private alertify: AlertifyService,\n              private fb: FormBuilder,\n              private router: Router\n  ){ }\n\n  ngOnInit() {\n    this.bsConfig = {\n    containerClass: 'theme-red'\n    },\n    this.createForm();\n    this.login = this.authService.getLogin();\n  }\n  createForm() {\n    this.resetForm = this.fb.group({\n      password: ['', [Validators.required,Validators.minLength(6),\n        Validators.maxLength(12)]],\n      confirmpassword: ['', Validators.required]\n    }, { validators: this.passwordMatchValidator}); \n  }\n\n  passwordMatchValidator(g: FormGroup){\n    return g.get('password') === g.get('confirmpassword');\n  }\n\n  resetPassword(){\n    // assigner les valeur dans resetForm à user\n    this.user = Object.assign({},this.resetForm.value);\n    this.user.userName = this.login;\n    \n    // tslint:disable-next-line: no-debugger\n    //debugger;\n    this.authService.reset(this.user).subscribe(() => {\n      this.alertify.success('reset réussi');\n      // tslint:disable-next-line: no-debugger\n      //debugger;\n    }, error => \n    { this.alertify.error(error); },\n    () => this.cancelReset.emit(false));// pour fermer la fenêtre\n    // tslint:disable-next-line: no-debugger\n    console.log(this.resetForm.value);\n  }\n\n  cancel(){\n    // envoi de l'event avec la valeur false pour valider le cancel\n    this.cancelReset.emit(false);\n    console.log('cancelled');\n  }\n\n}\n","<form [formGroup]=\"resetForm\"(ngSubmit)=\"resetPassword()\">\n  <!-- <div class=\"form-group\">\n    <!-- && resetForm.get('password').touched supprimé dans chk ngif -->\n    <div class=\"form-group\">\n      <div >\n        <strong class=\"row justify-content-center title\">Reset mot de passe de {{login}}</strong>\n      </div>\n      <!-- && registerForm.get('password').touched supprimé dans chk ngif -->\n      <input type=\"password\" \n      [ngClass]=\"{'is-invalid': resetForm.get('password').errors && \n      resetForm.get('password').touched}\"\n      class=\"form-control\" formControlName= \"password\"\n      placeholder=\"mot de passe\">\n      <div class=\"invalid-feedback\"\n        *ngIf=\"resetForm.get('password').hasError('required')\">\n        Entrer un mot de passe\n      </div>\n      <div class=\"invalid-feedback\"\n        *ngIf=\"resetForm.get('password').hasError('minlength')\">\n        Entrer un mot de passe de minimum 6 caractères\n      </div>\n      <div class=\"invalid-feedback\"\n        *ngIf=\"resetForm.get('password').hasError('maxlength')\">\n        Entrer un mot de passe de maximum 12 caractères\n      </div>\n    </div>\n\n  <div class=\"form-group\"> \n    <input type=\"password\" \n    [ngClass]=\"{'is-invalid': resetForm.get('confirmpassword').errors\n    && resetForm.get('confirmpassword').touched\n    || resetForm.get('confirmpassword').touched\n    && resetForm.hasError('mismatch')}\"\n    class=\"form-control\" formControlName= \"confirmpassword\"\n    placeholder=\"confirmer mot de passe\">\n\n    <div class=\"invalid-feedback\"\n      *ngIf=\"resetForm.get('confirmpassword').hasError('required')\">\n      Entrer un mot de passe\n    </div>\n    <div class=\"invalid-feedback\"\n      *ngIf=\"resetForm.hasError('mismatch')\">\n      Entrer un mot de passe identique\n    </div>\n  </div> \n\n  <div class=\"form-group text-center\">\n    <button class=\"btn btn-success\" [disabled]=\"!resetForm.valid\" type=\"submit\">Valider </button>\n    <button class=\"btn btn-default\" type=\"button\" (click)=\"cancel()\">Cancel</button>\n  </div>\n\n</form>","import {Routes} from '@angular/router';\r\nimport {HomeComponent} from './home/home.component';\r\nimport {MemberListComponent} from './members/member-list/member-list.component';\r\nimport {MessagesComponent} from './messages/message.component';\r\nimport {ListsComponent} from './lists/lists.component';\r\nimport { AuthGuard } from './_guards/auth.guard';\r\nimport { MemberDetailComponent } from './members/member-detail/member-detail.component';\r\nimport { MemberDetailResolver } from './_resolver/member-detail-resolver';\r\nimport { MemberListResolver } from './_resolver/member-list-resolver';\r\nimport { MemberEditComponent } from './members/member-edit/member-edit.component';\r\nimport { MemberEditResolver } from './_resolver/member-edit-resolver';\r\nimport { PreventUnsavedChanges } from './_guards/prevent-unsaved-changes';\r\nimport { ListResolver } from './_resolver/list-resolver';\r\nimport { MessagesResolver } from './_resolver/messages-resolver';\r\n\r\n\r\n// tableau de routes\r\nexport const appRoutes: Routes = [\r\n    {path : '', component: HomeComponent},\r\n    {   path : '',\r\n        runGuardsAndResolvers: 'always',\r\n        canActivate: [AuthGuard],\r\n        children:[\r\n            {path : 'members', component: MemberListComponent, \r\n                resolve: {users: MemberListResolver}},\r\n            {path : 'messages', component: MessagesComponent,\r\n                resolve: {messages: MessagesResolver}},\r\n            {path : 'members/edit', component: MemberEditComponent,\r\n                    resolve: {user: MemberEditResolver}, canDeactivate: [PreventUnsavedChanges]},\r\n            {path : 'lists', component: ListsComponent,\r\n                resolve : {users : ListResolver}},\r\n            // appel du resolver dans la route pour récuperer les datas du user\r\n            {path : 'members/:id', component : MemberDetailComponent, resolve: {user: MemberDetailResolver}}\r\n        ]\r\n    },       // canActivate [tableau de guards]\r\n\r\n    // pathMatch: 'full' pour correspondance totale\r\n   {path : '**', redirectTo: 'home', pathMatch: 'full'}\r\n]","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:5000/api/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}